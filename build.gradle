/*
注意：如要更改版本请修改version.properties
 */


buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.github.zi_jing.cuckoogradle" version "1.0.1"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

Properties versionProperties = new Properties();
versionProperties.load(new StringReader(project.file('version.properties').getText('UTF-8')))

version = versionProperties.getOrDefault('modVersion', 'unknown')
group = 'com.github.zi_jing.cuckoolib' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
description = 'The Cuckoo commons library.'
archivesBaseName = 'CuckooLib'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

CuckooGradle {
    mcVersion = '1.16.1'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
    if (project.hasProperty('useLocalBuildMaven') && project.property('useLocalBuildMaven') == 'true') {
        maven {
            name = 'LocalBuildMaven'
            url = 'file:///' + project.projectDir.absolutePath + '/LocalBuildMaven'
        }
    }
    if (System.getenv().containsKey("GITHUB_ACTIONS") || System.getenv().containsKey("CI")) {
        println 'Detected Github Actions environment, Aliyun Maven will be disabled'
    } else {
        maven {
            name = 'AliyunMaven'
            url = 'http://maven.aliyun.com/nexus/content/groups/public'
        }
    }

    jcenter()

    maven {
        // JEI
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }

    maven {
        // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200820-1.16.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                cuckoolib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                cuckoolib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                cuckoolib {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.2-33.0.61'

    // JEI
    compileOnly fg.deobf('mezz.jei:jei-1.16.2:7.1.3.20:api')
    runtimeOnly fg.deobf('mezz.jei:jei-1.16.2:7.1.3.20')

    // TOP
    compileOnly fg.deobf('mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.0.4-beta-7:api')
    runtimeOnly fg.deobf('mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.0.4-beta-7')

    testImplementation 'junit:junit:4.12'
}

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                'Specification-Title'     : 'cuckoolib',
                'Specification-Vendor'    : 'cuckoolib',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : '${version}',
                'Implementation-Vendor'   : 'cuckoolib',
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
    afterEvaluate {
        finalizedBy reobfJar
    }
}

artifacts {
    archives jar
    archives sourceJar
}

publishing.publications {
    mavenJava(MavenPublication) {
        artifact jar
        artifact sourceJar
    }
}

publishing.repositories {
    if (project.hasProperty('useLocalBuildMaven') && project.property('useLocalBuildMaven') == 'true') {
        maven {
            name = 'LocalBuildMaven'
            url = 'file:///' + project.projectDir.absolutePath + '/LocalBuildMaven'
        }
    }
    maven {
        name = 'RepsyMavenForCuckooDevTeam'
        url = 'https://repo.repsy.io/mvn/zijing_233/modpublish/'
        credentials {
            if (project.hasProperty('MavenUserName') && project.hasProperty('MavenPassword')) {
                username = project.property('MavenUserName')
                password = project.property('MavenPassword')
            } else {
                println 'WARNING: There isn\'t the property "MavenUserName" or property "MavenPassword"'
                println 'Publishing to the Repsy Maven for CuckooDevTeam will be unusable.'
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}